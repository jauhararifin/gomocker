// Code generated by gomocker. DO NOT EDIT.

package examples

import (
	gomocker "github.com/jauhararifin/gomocker"
	"testing"
)

type Aggregator_SumInt func(Arg1 ...int) (R1 int)
type Aggregator_SumIntMocker struct {
	mocker *gomocker.ReflectMocker
}
type Aggregator_SumIntMockerParam struct {
	Arg1 []int
}
type Aggregator_SumIntMockerReturn struct {
	R1 int
}
type Aggregator_SumIntMockerInvocation struct {
	Parameters Aggregator_SumIntMockerParam
	Returns    Aggregator_SumIntMockerReturn
}

func NewMockedAggregator_SumInt(t testing.TB) (*Aggregator_SumIntMocker, Aggregator_SumInt) {
	f := gomocker.NewReflectMocker(t, "Aggregator_SumInt", true, Aggregator_SumIntMockerInvocation{})
	m := &Aggregator_SumIntMocker{mocker: f}
	return m, m.Call
}
func (m *Aggregator_SumIntMocker) Call(Arg1 ...int) (R1 int) {
	rets := m.mocker.CallVariadic(Arg1).(Aggregator_SumIntMockerReturn)
	return rets.R1
}
func (m *Aggregator_SumIntMocker) MockReturnDefaultValues(nTimes int) {
	m.mocker.MockReturnDefaultValues(nTimes)
}
func (m *Aggregator_SumIntMocker) MockReturnDefaultValuesForever() {
	m.mocker.MockReturnDefaultValuesForever()
}
func (m *Aggregator_SumIntMocker) MockReturnDefaultValuesOnce() {
	m.mocker.MockReturnDefaultValuesOnce()
}
func (m *Aggregator_SumIntMocker) MockReturnValues(nTimes int, R1 int) {
	m.mocker.MockReturnValues(nTimes, R1)
}
func (m *Aggregator_SumIntMocker) MockReturnValuesForever(R1 int) {
	m.mocker.MockReturnValuesForever(R1)
}
func (m *Aggregator_SumIntMocker) MockReturnValuesOnce(R1 int) {
	m.mocker.MockReturnValuesOnce(R1)
}
func (m *Aggregator_SumIntMocker) Mock(nTimes int, f func(...int) int) {
	m.mocker.Mock(nTimes, f)
}
func (m *Aggregator_SumIntMocker) MockForever(f func(...int) int) {
	m.mocker.MockForever(f)
}
func (m *Aggregator_SumIntMocker) MockOnce(f func(...int) int) {
	m.mocker.MockOnce(f)
}
func (m *Aggregator_SumIntMocker) Invocations() []Aggregator_SumIntMockerInvocation {
	invocs := m.mocker.Invocations()
	results := make([]Aggregator_SumIntMockerInvocation, len(invocs), len(invocs))
	for i, iv := range invocs {
		results[i] = iv.(Aggregator_SumIntMockerInvocation)
	}
	return results
}
func (m *Aggregator_SumIntMocker) TakeOneInvocation() Aggregator_SumIntMockerInvocation {
	return m.mocker.TakeOneInvocation().(Aggregator_SumIntMockerInvocation)
}

type AggregatorMocker struct {
	SumInt *Aggregator_SumIntMocker
}
type AggregatorMocked struct {
	mocker *AggregatorMocker
}

func NewMockedAggregator(t testing.TB) (*AggregatorMocker, Aggregator) {
	m0, _ := NewMockedAggregator_SumInt(t)
	m := &AggregatorMocker{SumInt: m0}
	i := &AggregatorMocked{mocker: m}
	return m, i
}
func (m *AggregatorMocked) SumInt(Arg1 ...int) (R1 int) {
	return m.mocker.SumInt.Call(Arg1...)
}
