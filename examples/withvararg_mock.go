// Code generated by gomocker. DO NOT EDIT.

package examples

import (
	"context"
	gomocker "github.com/jauhararifin/gomocker"
	"testing"
)

type SumMocker struct {
	mocker *gomocker.ReflectMocker
}
type SumMockerParam struct {
	Arg1 context.Context
	Arg2 []Getter
}
type SumMockerReturn struct {
	R1 int
}
type SumMockerInvocation struct {
	Parameters SumMockerParam
	Returns    SumMockerReturn
}

func NewMockedSum(t testing.TB) (*SumMocker, Sum) {
	f := gomocker.NewReflectMocker(t, "Sum", SumMockerInvocation{})
	m := &SumMocker{mocker: f}
	return m, m.Call
}
func (m *SumMocker) Call(Arg1 context.Context, Arg2 ...Getter) (R1 int) {
	rets := m.mocker.Call(Arg1, Arg2).(SumMockerReturn)
	return rets.R1
}
func (m *SumMocker) MockReturnDefaultValues(nTimes int) {
	m.mocker.MockReturnDefaultValues(nTimes)
}
func (m *SumMocker) MockReturnDefaultValuesForever() {
	m.mocker.MockReturnDefaultValuesForever()
}
func (m *SumMocker) MockReturnDefaultValuesOnce() {
	m.mocker.MockReturnDefaultValuesOnce()
}
func (m *SumMocker) MockReturnValues(nTimes int, R1 int) {
	m.mocker.MockReturnValues(nTimes, R1)
}
func (m *SumMocker) MockReturnValuesForever(R1 int) {
	m.mocker.MockReturnValuesForever(R1)
}
func (m *SumMocker) MockReturnValuesOnce(R1 int) {
	m.mocker.MockReturnValuesOnce(R1)
}
func (m *SumMocker) Mock(nTimes int, f func(context.Context, []Getter) int) {
	m.mocker.Mock(nTimes, f)
}
func (m *SumMocker) MockForever(f func(context.Context, []Getter) int) {
	m.mocker.MockForever(f)
}
func (m *SumMocker) MockOnce(f func(context.Context, []Getter) int) {
	m.mocker.MockOnce(f)
}
func (m *SumMocker) Invocations() []SumMockerInvocation {
	invocs := m.mocker.Invocations()
	results := make([]SumMockerInvocation, len(invocs), len(invocs))
	for i, iv := range invocs {
		results[i] = iv.(SumMockerInvocation)
	}
	return results
}
func (m *SumMocker) TakeOneInvocation() SumMockerInvocation {
	return m.mocker.TakeOneInvocation().(SumMockerInvocation)
}
