// Code generated by gomocker. DO NOT EDIT.

package examples

import (
	"context"
	gomocker "github.com/jauhararifin/gomocker"
	"testing"
)

type AddFuncMocker struct {
	mocker *gomocker.ReflectMocker
}
type AddFuncMockerParam struct {
	Arg1 context.Context
	Arg2 int
	Arg3 int
}
type AddFuncMockerReturn struct {
	R1 int
	R2 error
}
type AddFuncMockerInvocation struct {
	Parameters AddFuncMockerParam
	Returns    AddFuncMockerReturn
}

func NewMockedAddFunc(t testing.TB) (*AddFuncMocker, AddFunc) {
	f := gomocker.NewReflectMocker(t, "AddFunc", false, AddFuncMockerInvocation{})
	m := &AddFuncMocker{mocker: f}
	return m, m.Call
}
func (m *AddFuncMocker) Call(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error) {
	rets := m.mocker.Call(Arg1, Arg2, Arg3).(AddFuncMockerReturn)
	return rets.R1, rets.R2
}
func (m *AddFuncMocker) MockReturnDefaultValues(nTimes int) {
	m.mocker.MockReturnDefaultValues(nTimes)
}
func (m *AddFuncMocker) MockReturnDefaultValuesForever() {
	m.mocker.MockReturnDefaultValuesForever()
}
func (m *AddFuncMocker) MockReturnDefaultValuesOnce() {
	m.mocker.MockReturnDefaultValuesOnce()
}
func (m *AddFuncMocker) MockReturnValues(nTimes int, R1 int, R2 error) {
	m.mocker.MockReturnValues(nTimes, R1, R2)
}
func (m *AddFuncMocker) MockReturnValuesForever(R1 int, R2 error) {
	m.mocker.MockReturnValuesForever(R1, R2)
}
func (m *AddFuncMocker) MockReturnValuesOnce(R1 int, R2 error) {
	m.mocker.MockReturnValuesOnce(R1, R2)
}
func (m *AddFuncMocker) Mock(nTimes int, f func(context.Context, int, int) (int, error)) {
	m.mocker.Mock(nTimes, f)
}
func (m *AddFuncMocker) MockForever(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockForever(f)
}
func (m *AddFuncMocker) MockOnce(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockOnce(f)
}
func (m *AddFuncMocker) Invocations() []AddFuncMockerInvocation {
	invocs := m.mocker.Invocations()
	results := make([]AddFuncMockerInvocation, len(invocs), len(invocs))
	for i, iv := range invocs {
		results[i] = iv.(AddFuncMockerInvocation)
	}
	return results
}
func (m *AddFuncMocker) TakeOneInvocation() AddFuncMockerInvocation {
	return m.mocker.TakeOneInvocation().(AddFuncMockerInvocation)
}
