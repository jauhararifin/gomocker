// Code generated by gomocker. DO NOT EDIT.

package examples

import (
	"context"
	gomocker "github.com/jauhararifin/gomocker"
	"testing"
)

type Math_Add func(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error)
type Math_AddMocker struct {
	mocker *gomocker.ReflectMocker
}
type Math_AddMockerParam struct {
	Arg1 context.Context
	Arg2 int
	Arg3 int
}
type Math_AddMockerReturn struct {
	R1 int
	R2 error
}
type Math_AddMockerInvocation struct {
	Parameters Math_AddMockerParam
	Returns    Math_AddMockerReturn
}

func NewMockedMath_Add(t testing.TB) (*Math_AddMocker, Math_Add) {
	f := gomocker.NewReflectMocker(t, "Math_Add", false, Math_AddMockerInvocation{})
	m := &Math_AddMocker{mocker: f}
	return m, m.Call
}
func (m *Math_AddMocker) Call(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error) {
	rets := m.mocker.Call(Arg1, Arg2, Arg3).(Math_AddMockerReturn)
	return rets.R1, rets.R2
}
func (m *Math_AddMocker) MockReturnDefaultValues(nTimes int) {
	m.mocker.MockReturnDefaultValues(nTimes)
}
func (m *Math_AddMocker) MockReturnDefaultValuesForever() {
	m.mocker.MockReturnDefaultValuesForever()
}
func (m *Math_AddMocker) MockReturnDefaultValuesOnce() {
	m.mocker.MockReturnDefaultValuesOnce()
}
func (m *Math_AddMocker) MockReturnValues(nTimes int, R1 int, R2 error) {
	m.mocker.MockReturnValues(nTimes, R1, R2)
}
func (m *Math_AddMocker) MockReturnValuesForever(R1 int, R2 error) {
	m.mocker.MockReturnValuesForever(R1, R2)
}
func (m *Math_AddMocker) MockReturnValuesOnce(R1 int, R2 error) {
	m.mocker.MockReturnValuesOnce(R1, R2)
}
func (m *Math_AddMocker) Mock(nTimes int, f func(context.Context, int, int) (int, error)) {
	m.mocker.Mock(nTimes, f)
}
func (m *Math_AddMocker) MockForever(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockForever(f)
}
func (m *Math_AddMocker) MockOnce(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockOnce(f)
}
func (m *Math_AddMocker) Invocations() []Math_AddMockerInvocation {
	invocs := m.mocker.Invocations()
	results := make([]Math_AddMockerInvocation, len(invocs), len(invocs))
	for i, iv := range invocs {
		results[i] = iv.(Math_AddMockerInvocation)
	}
	return results
}
func (m *Math_AddMocker) TakeOneInvocation() Math_AddMockerInvocation {
	return m.mocker.TakeOneInvocation().(Math_AddMockerInvocation)
}

type Math_Subtract func(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error)
type Math_SubtractMocker struct {
	mocker *gomocker.ReflectMocker
}
type Math_SubtractMockerParam struct {
	Arg1 context.Context
	Arg2 int
	Arg3 int
}
type Math_SubtractMockerReturn struct {
	R1 int
	R2 error
}
type Math_SubtractMockerInvocation struct {
	Parameters Math_SubtractMockerParam
	Returns    Math_SubtractMockerReturn
}

func NewMockedMath_Subtract(t testing.TB) (*Math_SubtractMocker, Math_Subtract) {
	f := gomocker.NewReflectMocker(t, "Math_Subtract", false, Math_SubtractMockerInvocation{})
	m := &Math_SubtractMocker{mocker: f}
	return m, m.Call
}
func (m *Math_SubtractMocker) Call(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error) {
	rets := m.mocker.Call(Arg1, Arg2, Arg3).(Math_SubtractMockerReturn)
	return rets.R1, rets.R2
}
func (m *Math_SubtractMocker) MockReturnDefaultValues(nTimes int) {
	m.mocker.MockReturnDefaultValues(nTimes)
}
func (m *Math_SubtractMocker) MockReturnDefaultValuesForever() {
	m.mocker.MockReturnDefaultValuesForever()
}
func (m *Math_SubtractMocker) MockReturnDefaultValuesOnce() {
	m.mocker.MockReturnDefaultValuesOnce()
}
func (m *Math_SubtractMocker) MockReturnValues(nTimes int, R1 int, R2 error) {
	m.mocker.MockReturnValues(nTimes, R1, R2)
}
func (m *Math_SubtractMocker) MockReturnValuesForever(R1 int, R2 error) {
	m.mocker.MockReturnValuesForever(R1, R2)
}
func (m *Math_SubtractMocker) MockReturnValuesOnce(R1 int, R2 error) {
	m.mocker.MockReturnValuesOnce(R1, R2)
}
func (m *Math_SubtractMocker) Mock(nTimes int, f func(context.Context, int, int) (int, error)) {
	m.mocker.Mock(nTimes, f)
}
func (m *Math_SubtractMocker) MockForever(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockForever(f)
}
func (m *Math_SubtractMocker) MockOnce(f func(context.Context, int, int) (int, error)) {
	m.mocker.MockOnce(f)
}
func (m *Math_SubtractMocker) Invocations() []Math_SubtractMockerInvocation {
	invocs := m.mocker.Invocations()
	results := make([]Math_SubtractMockerInvocation, len(invocs), len(invocs))
	for i, iv := range invocs {
		results[i] = iv.(Math_SubtractMockerInvocation)
	}
	return results
}
func (m *Math_SubtractMocker) TakeOneInvocation() Math_SubtractMockerInvocation {
	return m.mocker.TakeOneInvocation().(Math_SubtractMockerInvocation)
}

type MathMocker struct {
	Add      *Math_AddMocker
	Subtract *Math_SubtractMocker
}
type MathMocked struct {
	mocker *MathMocker
}

func NewMockedMath(t testing.TB) (*MathMocker, Math) {
	m0, _ := NewMockedMath_Add(t)
	m1, _ := NewMockedMath_Subtract(t)
	m := &MathMocker{Add: m0, Subtract: m1}
	i := &MathMocked{mocker: m}
	return m, i
}
func (m *MathMocked) Add(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error) {
	return m.mocker.Add.Call(Arg1, Arg2, Arg3)
}
func (m *MathMocked) Subtract(Arg1 context.Context, Arg2 int, Arg3 int) (R1 int, R2 error) {
	return m.mocker.Subtract.Call(Arg1, Arg2, Arg3)
}
