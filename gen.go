package gomocker

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io"

	"github.com/dave/jennifer/jen"
)

const gomockerPath = "github.com/jauhararifin/gomocker"

type generateMockerOption struct {
	funcMockerNamer      FuncMockerNamer
	interfaceMockerNamer InterfaceMockerNamer
	inputFileName        string
	outputPackagePath    string
}

type GenerateMockerOption func(option *generateMockerOption)

func WithFuncMockerNamer(namer FuncMockerNamer) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.funcMockerNamer = namer
	}
}

func WithInterfaceMockerNamer(namer InterfaceMockerNamer) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.interfaceMockerNamer = namer
	}
}

func WithInputFileName(inputFileName string) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.inputFileName = inputFileName
	}
}

func WithOutputPackagePath(outputPackagePath string) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.outputPackagePath = outputPackagePath
	}
}

func GenerateMocker(r io.Reader, names []string, w io.Writer, options ...GenerateMockerOption) error {
	option := initOption(options...)

	fileAst, err := parseSourceFile(option, r)
	if err != nil {
		return err
	}

	file := createCodeGenFile(option, fileAst)

	for _, name := range names {
		file.Add(generateEntityMockerByName(option, fileAst, name)).Line().Line()
	}

	return file.Render(w)
}

func initOption(options ...GenerateMockerOption) *generateMockerOption {
	option := &generateMockerOption{
		funcMockerNamer:      &defaultFuncMockerNamer{},
		interfaceMockerNamer: &defaultInterfaceMockerNamer{},
		inputFileName:        "dummyfile.go",
	}
	for _, opt := range options {
		opt(option)
	}
	return option
}

func parseSourceFile(option *generateMockerOption, r io.Reader) (*ast.File, error) {
	fset := token.NewFileSet()
	fileAst, err := parser.ParseFile(fset, option.inputFileName, r, 0)
	if err != nil {
		return nil, fmt.Errorf("cannot parse go code: %w", err)
	}
	return fileAst, nil
}

func createCodeGenFile(option *generateMockerOption, fileAst *ast.File) *jen.File {
	outputPackagePath := fileAst.Name.String()
	if len(option.outputPackagePath) > 0 {
		outputPackagePath = option.outputPackagePath
	}
	file := jen.NewFilePath(outputPackagePath)
	file.HeaderComment("Code generated by gomocker " + gomockerPath + ". DO NOT EDIT.")

	return file
}

func generateEntityMockerByName(
	option *generateMockerOption,
	fileAst *ast.File,
	name string,
) jen.Code {
	typ := TypeFromAstName(fileAst, name)

	if typ.FuncType != nil {
		return generateFunctionMocker(name, *typ.FuncType, option.funcMockerNamer)
	}

	if typ.InterfaceType != nil {
		return generateInterfaceMocker(name, *typ.InterfaceType, option.funcMockerNamer, option.interfaceMockerNamer)
	}

	panic(fmt.Errorf("only supported interface and function"))
}

func generateFunctionMocker(
	funcName string,
	funcType FuncType,
	mockerNamer FuncMockerNamer,
) jen.Code {
	funcMockerGenerator := funcMockerGenerator{
		funcName:        funcName,
		funcType:        funcType,
		mockerNamer:     mockerNamer,
		withConstructor: true,
	}
	return funcMockerGenerator.generate()
}

func generateInterfaceMocker(
	interfaceName string,
	interfaceType InterfaceType,
	funcMockerNamer FuncMockerNamer,
	interfaceMockerNamer InterfaceMockerNamer,
) jen.Code {
	generator := &interfaceMockerGenerator{
		interfaceName:        interfaceName,
		interfaceType:        interfaceType,
		funcMockerNamer:      funcMockerNamer,
		interfaceMockerNamer: interfaceMockerNamer,
	}
	return generator.generate()
}
