package gomocker

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io"

	"github.com/dave/jennifer/jen"
)

type generateMockerOption struct {
	inputFileName     string
	outputPackagePath string
}

type GenerateMockerOption func(option *generateMockerOption)

func WithInputFileName(inputFileName string) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.inputFileName = inputFileName
	}
}

func WithOutputPackagePath(outputPackagePath string) GenerateMockerOption {
	return func(option *generateMockerOption) {
		option.outputPackagePath = outputPackagePath
	}
}

type mockerGenerator struct {
	astTypeGenerator interface {
		GenerateTypesFromAst(file *ast.File, names ...string) []Type
	}
	funcMockerGenerator interface {
		GenerateFunctionMocker(
			name string,
			funcType FuncType,
			withConstructor bool,
		) jen.Code
	}
	interfaceMockerGenerator interface {
		GenerateInterfaceMocker(
			name string,
			interfaceType InterfaceType,
		) jen.Code
	}
}

func (m *mockerGenerator) GenerateMocker(
	r io.Reader,
	names []string,
	w io.Writer,
	options ...GenerateMockerOption,
) error {
	option := m.initOption(options...)

	fileAst, err := m.parseSourceFile(option, r)
	if err != nil {
		return err
	}

	file := m.createCodeGenFile(option, fileAst)

	types := m.astTypeGenerator.GenerateTypesFromAst(fileAst, names...)
	for i, typ := range types {
		file.Add(m.generateEntityMockerByName(option, typ, names[i])).Line().Line()
	}

	return file.Render(w)
}

func (m *mockerGenerator) initOption(options ...GenerateMockerOption) *generateMockerOption {
	option := &generateMockerOption{
		inputFileName: "dummyfile.go",
	}
	for _, opt := range options {
		opt(option)
	}
	return option
}

func (m *mockerGenerator) parseSourceFile(option *generateMockerOption, r io.Reader) (*ast.File, error) {
	fset := token.NewFileSet()
	fileAst, err := parser.ParseFile(fset, option.inputFileName, r, 0)
	if err != nil {
		return nil, fmt.Errorf("cannot parse go code: %w", err)
	}
	return fileAst, nil
}

func (m *mockerGenerator) createCodeGenFile(option *generateMockerOption, fileAst *ast.File) *jen.File {
	outputPackagePath := fileAst.Name.String()
	if len(option.outputPackagePath) > 0 {
		outputPackagePath = option.outputPackagePath
	}
	file := jen.NewFilePath(outputPackagePath)
	file.HeaderComment("Code generated by gomocker " + gomockerPath + ". DO NOT EDIT.")

	return file
}

func (m *mockerGenerator) generateEntityMockerByName(
	option *generateMockerOption,
	typ Type,
	name string,
) jen.Code {
	if typ.FuncType != nil {
		return m.funcMockerGenerator.GenerateFunctionMocker(name, *typ.FuncType, true)
	}

	if typ.InterfaceType != nil {
		return m.interfaceMockerGenerator.GenerateInterfaceMocker(name, *typ.InterfaceType)
	}

	panic(fmt.Errorf("only supported interface and function"))
}

func (m *mockerGenerator) generateFunctionMocker(
	funcName string,
	funcType FuncType,
	mockerNamer FuncMockerNamer,
) jen.Code {
	funcMockerGenerator := funcMockerGeneratorHelper{
		funcName:        funcName,
		funcType:        funcType,
		mockerNamer:     mockerNamer,
		withConstructor: true,
	}
	return funcMockerGenerator.generate()
}

func (m *mockerGenerator) generateInterfaceMocker(
	interfaceName string,
	interfaceType InterfaceType,
	funcMockerNamer FuncMockerNamer,
	interfaceMockerNamer InterfaceMockerNamer,
) jen.Code {
	generator := &interfaceMockerGeneratorHelper{
		interfaceName:        interfaceName,
		interfaceType:        interfaceType,
		funcMockerNamer:      funcMockerNamer,
		interfaceMockerNamer: interfaceMockerNamer,
	}
	return generator.generate()
}
